name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  # Code Quality and Linting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - Backend
        working-directory: ./backend
        run: npm ci

      - name: Install dependencies - Frontend
        working-directory: ./frontend
        run: npm ci

      - name: Lint backend
        working-directory: ./backend
        run: |
          npm run lint
          npm run format:check

      - name: Lint frontend
        working-directory: ./frontend
        run: |
          npm run lint
          npm run format:check
          npm run type-check

      - name: Check formatting
        run: |
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || {
            echo "Code formatting issues found. Run 'npm run format' to fix them."
            exit 1
          }

  # Unit and Integration Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret_key_for_ci
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret_key_for_ci
          HOSTAWAY_API_KEY: test_hostaway_key
          GOOGLE_PLACES_API_KEY: test_google_key
        run: |
          npm run test -- --coverage --watchAll=false

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run unit tests
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
        run: npm run test -- --coverage --watchAll=false

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: perf_user
          POSTGRES_PASSWORD: perf_password
          POSTGRES_DB: perf_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Setup performance test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://perf_user:perf_password@localhost:5432/perf_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: |
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run performance tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://perf_user:perf_password@localhost:5432/perf_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret_key_for_ci
        run: npm run test:performance

  # Build Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    if: github.event_name == 'push'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: e2e_user
          POSTGRES_PASSWORD: e2e_password
          POSTGRES_DB: e2e_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Start application stack
        run: |
          # Create docker-compose for E2E tests
          cat > docker-compose.e2e.yml << EOF
          version: '3.8'
          services:
            backend:
              image: ${{ needs.build.outputs.backend-image }}
              environment:
                - DATABASE_URL=postgresql://e2e_user:e2e_password@host.docker.internal:5432/e2e_db
                - REDIS_URL=redis://host.docker.internal:6379
                - NODE_ENV=test
                - JWT_SECRET=e2e_jwt_secret
                - PORT=3001
              ports:
                - "3001:3001"
              depends_on:
                - postgres
                - redis
              extra_hosts:
                - "host.docker.internal:host-gateway"

            frontend:
              image: ${{ needs.build.outputs.frontend-image }}
              environment:
                - NEXT_PUBLIC_API_URL=http://backend:3001
              ports:
                - "3000:3000"
              depends_on:
                - backend
          EOF

          docker-compose -f docker-compose.e2e.yml up -d

      - name: Wait for services to be ready
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        working-directory: ./frontend
        run: |
          npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:3001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.e2e.yml down -v

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.reviews.flexliving.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS Staging
        run: |
          # Update ECS task definition with new image
          aws ecs update-service \
            --cluster flexliving-reviews-staging \
            --service backend-service \
            --task-definition flexliving-reviews-backend:${{ github.run_number }} \
            --force-new-deployment

          aws ecs update-service \
            --cluster flexliving-reviews-staging \
            --service frontend-service \
            --task-definition flexliving-reviews-frontend:${{ github.run_number }} \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster flexliving-reviews-staging \
            --services backend-service frontend-service

      - name: Run smoke tests
        run: |
          curl -f https://staging-api.reviews.flexliving.com/api/health
          curl -f https://staging.reviews.flexliving.com

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://reviews.flexliving.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploy to production'
            });
            return deployment.data.id;

      - name: Set deployment status to in progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment in progress'
            });

      - name: Deploy to ECS Production
        id: deploy
        run: |
          # Blue-Green deployment strategy
          # Update task definitions
          aws ecs update-service \
            --cluster flexliving-reviews-production \
            --service backend-service \
            --task-definition flexliving-reviews-backend:${{ github.run_number }} \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"

          aws ecs update-service \
            --cluster flexliving-reviews-production \
            --service frontend-service \
            --task-definition flexliving-reviews-frontend:${{ github.run_number }} \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster flexliving-reviews-production \
            --services backend-service frontend-service

      - name: Run production health checks
        run: |
          # Comprehensive health checks
          curl -f https://api.reviews.flexliving.com/api/health
          curl -f https://reviews.flexliving.com
          
          # Check specific endpoints
          response=$(curl -s -w "%{http_code}" https://api.reviews.flexliving.com/api/reviews)
          if [[ "$response" -ge 400 ]]; then
            echo "Health check failed with status: $response"
            exit 1
          fi

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://reviews.flexliving.com',
              description: 'Deployment completed successfully'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed'
            });

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            FlexLiving Reviews Dashboard deployment ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification on failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'FlexLiving Reviews Dashboard - Deployment Failed'
          body: |
            The deployment of FlexLiving Reviews Dashboard has failed.
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Please check the GitHub Actions logs for more details.
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'noreply@flexliving.com'
